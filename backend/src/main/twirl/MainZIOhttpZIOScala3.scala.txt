@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import sttp.tapir.server.ziohttp.{ZioHttpInterpreter, ZioHttpServerOptions}
import zio.{Console, ExitCode, Scope, Runtime, ZLayer, ZIO, ZIOAppArgs, ZIOAppDefault}
import zio.http.{Server, HttpApp}
import zio.LogLevel
import zio.logging.{consoleLogger, ConsoleLoggerConfig, LogFilter, LogFormat}

object Main extends ZIOAppDefault:

  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =
    val consoleConfig = ConsoleLoggerConfig(LogFormat.default, LogFilter.logLevel(LogLevel.Debug))
    Runtime.removeDefaultLoggers >>> consoleLogger(consoleConfig)

  override def run: ZIO[Any with ZIOAppArgs with Scope, Any, Any] =
    val serverOptions: ZioHttpServerOptions[Any] =
      ZioHttpServerOptions.customiseInterceptors
        @if(addMetrics){.metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())}
        .options

    val app: HttpApp[Any, Throwable] = ZioHttpInterpreter(serverOptions).toHttp(Endpoints.all)

    val port = sys.env.get("HTTP_PORT").flatMap(_.toIntOption).getOrElse(8080)

    (
      for
        actualPort <- Server.install(app.withDefaultErrorResponse)
        _ <- Console.printLine(s"@if(addDocumentation){Go to http://localhost:${actualPort}/docs to open SwaggerUI. }else{Server started at http://localhost:${actualPort}. }Press ENTER key to exit.")
        _ <- Console.readLine
      yield ()
    ).provide(
      Server.defaultWithPort(port)
    ).exitCode
